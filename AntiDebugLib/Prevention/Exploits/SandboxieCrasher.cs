using System;
using System.Diagnostics;

using static AntiDebugLib.Native.AntiDebugLibNative;
using static AntiDebugLib.Native.Kernel32;

namespace AntiDebugLib.Prevention.Exploits
{

    /// <summary>
    /// <list type="bullet">
    /// <item>
    /// AntiCrack-DotNet :: https://github.com/AdvDebug/AntiCrack-DotNet/blob/91872f71c5601e4b037b713f31327dfde1662481/AntiCrack-DotNet/AntiVirtualization.cs#L209
    /// </item>
    /// </list>
    /// </summary>
    public class SandboxieCrasher : CheckBase
    {
        public override string Name => "Sandboxie Crasher";

        public override CheckReliability Reliability => CheckReliability.Okay;

        public override bool PreventPassive()
        {
            if (Environment.Is64BitProcess) // This only works on x86
                return true;

            byte[] code = { 0xB8, 0x26, 0x00, 0x00, 0x00 };
            var NtOpenProcess = GetProcAddress(MyGetModuleHandle("ntdll.dll"), "NtOpenProcess");
            WriteProcessMemory(Process.GetCurrentProcess().SafeHandle, NtOpenProcess, code, (uint)code.Length, 0);

            try
            {
                foreach (var process in Process.GetProcesses())
                {
                    try
                    {
                        var isCritical = false;
                        IsProcessCritical(process.SafeHandle, ref isCritical);
                    }
                    catch
                    {
                        // ignored
                    }
                }
            }
            catch
            {
                // ignored
            }

            return true;
        }
    }
}
